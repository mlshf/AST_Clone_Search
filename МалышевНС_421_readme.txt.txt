Найти реализацию можно по указанному адресу. Обращаю Ваше внимание на то, что последняя версия реализации находится именно на ветви diploma.
https://github.com/mlshf/AST_Clone_Search/tree/diploma
Так же Вы можете найти файлы реализации в приложенном к сообщению архиве.

Обращаю Ваше внимание и на тот факт, что программа предназначена для Linux-подобных систем - в частности писалась и тестировалась на ОС Ubuntu версии 14.04.

В реализации работа осуществляется с системой контроля версий Git. 
Для установки Git на ОС Ubuntu воспользуйтесь командной строкой:
sudo apt-get install git
Аналогично для других Linux-подобных систем.

Также, в реализации используется библиотека Boost, а именно функционал из файла boost/filesystem.hpp.
Для загрузки этой библиотеки на ОС Ubuntu воспользуйтесь командной строкой:
sudo apt-get install libboost-all-dev
Аналогично для других Linux-подобных систем.

Также, используется средство визуализации GraphViz, в частности используется его инструмент Dot.
Для установки GraphViz на ОС Ubuntu воспользуйтесь командной строкой:
sudo apt-get install graphviz
Аналогично для других Linux-подобных систем.

Также, часть реализации предложенного алгоритма, а именно модуль сравнения фрагментов исходного кода, написан на Python3.4.
Для проверки версии Python3 на ОС Ubuntu воспользуйтесь командной строкой:
python3 -V
Для обновления Python3 на ОС Ubuntu воспользуйтесь командной строкой:
sudo apt-get update
sudo apt-get install python3
Аналогично для других Linux-подобных систем.

Также, используются пакеты PyCParser и AnyTree для создания абстрактных синтаксических деревьев при сравнении фрагментов исходного кода в модуле сравнения, написанном на Python.
Для установки данных пакетов на ОС Ubuntu воспользуйтесь командной строкой:
pip install pycparser
pip install anytree
Аналогично для других Linux-подобных систем.

Также, используется средство статического анализа CppCheck, необходимое для инициализации алгоритма, который реализован в программе.
Для установки утилиты CppCheck на ОС Ubuntu воспользуйтесь командной строкой:
sudo apt-get install cppcheck
Аналогично для других Linux-подобных систем.

Также, используются псевдозаголовочные файлы стандартной библиотеки языка С из директории fake_libc_include, что необходимо для корректного создания представления
фрагмента исходного кода в виде абстрактного синтаксического дерева.
После сборки программы необходимо разместить указанную библиотеку, т.е. директорию fake_libc_include, находящуюся в архиве с исходным кодом и в репозитории на ресурсе GitHub, в одной директории с исполняемым файлом программы.

Также, используются два скрипта на Python - astmscp.py и testing_file.py, при помощи которых происходит сравнение двух фрагментов исходного кода.
После сборки программы необходимо разместить указаные файлы, находящиеся в архиве с исходным кодом и в репозитории на ресурсе GitHub, в одной директории с исполняемым файлом программы.

Для сборки проекта можно либо воспользоваться утилитой make для Makefile, находящегося в директории проекта, либо
воспользоваться IDE Code::Blocks - реализация писалась в этой среде и всё, что нужно сделать, это 
открыть в Code::Blocks файл проекта AST_Clone_Search.cbp и собрать его.

Обращаю Ваше внимание ещё и на тот факт, что программа предназначена дял работы с исходным кодом на С, поэтому обрабатывает лишь файлы с раширениями .c и .h.

Запуск программы описан в Readme файле в директории проекта.
Коротко опишем запуск и здесь.
Запуск осуществляется через консоль:
Переёдите в директорию, файлы которой (в том числе и в её поддиректориях, их поддиректориях и т.д.) необходимо проанализировать, затем запустите исполняемый файл с параметрами командной строки,
как указано ниже:
<PATH> <SHA1> <SIZE> <OUTPUT>
Где:
<PATH> заменяется на путь из текущей директории к исполняемому файлу реализации (Debug или Release версий),

<SHA1> заменяется на путь из текущей директории к txt файлу, содержащему список SHA1 хэшей стартовых версий по одному на строку, которые будут использованы для инициализации.

<SIZE> заменяется на целое число, соответствующее максимальному расстоянию от центра фрагмента исходного кода до его границ:

aaa
bbb
ccc
ddd
eee
fff
ggg

Для этого фрагмента центральной строкой является строка ddd, и <SIZE> равен 3.

<OUTPUT> заменяется на путь из текущей директории к файлу, в котором будет храниться результат работы, без расширения файла. Расширение не нужно, т.к. для каждого кластера клонов 
будет создаваться отдельный выходной файл с раширением gv для подачи на вход средству GraphViz, после работы которого результат будет храниться в файле с расширением png в виде графа.
Причём имя каждого файла будет состоят из имени файла из <OUPUT>, нижнего подчёркивания и номера кластера - т.е. для имени output_file и двух кластеров в результате будут получены 
файлы output_file_1.gv, output_file_2.gv, output_file_1.png и output_file_2.png.

Пример запуска:
../../AST_Clone_Search/bin/Release/AST_Clone_Search '../../io_dir/SHA1_list.txt' 3 '../../io_dir/output_file'

То есть программа проведёт инициализацию на основе версий, чьи хэши перечислены в файле SHA1_list.txt в директории ../../io_dir, найдёт все оригинальные фрагменты исходного кода 
из файлов этих версий размера не больше, чем 2 * 3 + 1 = 7, которые были обнаружены средством CppCheck при инициализации в версиях из списка SHA1_lists.txt.
Затем во всех версиях, следующих за первой из списка в файле SHA1_list.txt, произведёт поиск клонов оригнальных фрагментов кода размера так же не более, чем 2 * 3 + 1 = 7,
и выведет результат в директорию ../../io_dir с общим именем для выходных файлов output_file.